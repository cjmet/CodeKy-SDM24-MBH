@page "/inventory"
@using SDM24MBH.Data;
@using SDM24MBH.Logic;
@using System.Text.Json;
@using Microsoft.Maui.Storage;
@using System.Diagnostics;

<h3>Inventory (@_products.Count)</h3>

<button @onclick="ClearStorage">Clear Storage</button>
<button @onclick="LoadProducts">Load Products</button>
<button @onclick="SaveProducts">Save Products</button>
<button @onclick="DeleteProducts">Delete Products</button>
<label class="spacer"> &emsp; </label>
<button @onclick="NIA">Show All</button>
<button @onclick="NIA">Show In-Stock</button>
<button @onclick="NIA">Show Out-of-Stock</button>
<button @onclick="NIA">Inventory Value</button>
<button @onclick="NIA">Search</button>
<br>

@{
    counter = 0;
}
<ul class="list-unstyled">
    @foreach (var product in _products)
    {
        if (++counter > 10)
        {
            @("Too many products to display!")
            break;
        }
        <li>
            <input type="checkbox" @bind="product.Value.isSelected" />
            <label style="width:2em; text-align: right;">@(product.Key != product.Value.Id ? $"KeyError[{product.Key}]" : product.Key)</label>
            <input @bind="product.Value.Name" />
            <input @bind="product.Value.Description" style="width: 30em;" />
            <label> &nbsp Qty:</label><input @bind="product.Value.Quantity" type="number" style="width: 4em; text-align: right;" />
            <label> &nbsp  $</label><input @bind="product.Value.Price" type="number" style="width: 5.25em; text-align: right;" />
        </li>
    }
</ul>

<input placeholder="Name" @bind="newProduct.Name" />
<input placeholder="Description" @bind="newProduct.Description" />
<input placeholder="Price" @bind="newProduct.Price" />
<input placeholder="Quantity" @bind="newProduct.Quantity" />

<button @onclick="NIA">Add Product</button>




@code {
    // Variables
    private Int32 counter = 0;
    private Dictionary<int, IProduct> _products = new Dictionary<int, IProduct>
       {
        { 1, new Product { Id = 1, Name = "Products should be loading", Description = "from Local Storage?",}
        }
       };
    private IProduct newProduct = new Product();



    // Methods



    private async Task NIA()
    {
        await App.Current.MainPage.DisplayAlert("NIA", "Not Implemented Yet", "OK");
    }

    private async Task Alert(string message)
    {
        await App.Current.MainPage.DisplayAlert("Message", message, "OK");
    }

    private void ClearStorage()
    {
        Debug.WriteLine("Attempting to Clear LocalStorage");
        var _localStorage = new LocalStorage();
        _localStorage.ClearStorage();
        Debug.WriteLine("LocalStorage Cleared");
    }

    private void AddProduct()
    {
        var Id = _products.Keys.Max() + 1;
        newProduct.Id = Id;
        _products.Add(Id, newProduct);
        newProduct = new Product();
    }

    private async Task SaveProducts()
    {
        Debug.WriteLine("Attempting to Save Local Storage");
        var _localStorage = new LocalStorage();
        var results = await _localStorage.SaveProducts(_products);
        Debug.WriteLine($"SaveProducts: {results}");
    }

    private async Task LoadProducts()
    {
        Debug.WriteLine("Attempting to Load Local Storage");
        var _localStorage = new LocalStorage();
        _products = await _localStorage.LoadProducts();
        Debug.WriteLine($"LoadProducts: {_products.Count}");
        if (_products == null || _products.Count <= 0)
        {
            _products = InitTestProducts();
            Debug.WriteLine($"InitProducts: {_products.Count}");
        }
    }

    private void DeleteProducts()
    {
        _products.Where(p => p.Value.isSelected).ToList().ForEach(p => _products.Remove(p.Key));
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        return;

        // Debug.WriteLine("OnInitializedAsync");

        // Debug.WriteLine("Attempting to Load ProductLogic");
        // var _productLogic = new ProductLogic();
        // Debug.WriteLine("Attempting to GetAllProducts");

        // _products = _productLogic.GetAllProducts();
        // Debug.WriteLine($"OnInitializedAsync: _products.Count = {_products.Count}");
        // if (_products == null || _products.Count <= 0)
        // {
        //     Debug.WriteLine("OnInitializedAsync: Initializing Products");
        //     _products = InitTestProducts();
        //     Debug.WriteLine($"OnInitializedAsync: _products.Count = {_products.Count}");
        //     Int32 result=0;
        //     // result = _productLogic.AddUpdateProducts(_products);
        //     Debug.WriteLine($"OnInitializedAsync: result = {result}");
        //     if (result <= 0)
        //     {
        //         Debug.WriteLine("OnInitializedAsync: FAILED: Initializing Products Failed.");
        //     }
        // }

    }



    // ...



    protected private Dictionary<int, IProduct> InitTestProducts()
    {
        return new Dictionary<int, IProduct>
    {
        { 1, new Product { Id = 1, Name = "Purina Cat Chow", Description = "Complete and Balanced Cat Food", Price = 15.99m, Quantity = 100 } },
        { 2, new Product { Id = 2, Name = "Meow Mix", Description = "Complete and Balanced Cat Food", Price = 12.99m, Quantity = 0 } },
        { 3, new Product { Id = 3, Name = "Iams", Description = "Complete and Balanced Cat Food", Price = 17.99m, Quantity = 62 } },
        { 4, new Product { Id = 4, Name = "Hills Science Diet", Description = "Complete and Balanced Cat Food", Price = 19.99m, Quantity = 0 } },
      
        { 9, new Product { Id = 9, Name = "Woof Mix", Description = "Complete and Balanced Dog Food", Price = 12.99m, Quantity = -1 } },
        { 10, new Product { Id = 10, Name = "Iams", Description = "Complete and Balanced Dog Food", Price = 17.99m, Quantity = 11 } },
        { 11, new Product { Id = 11, Name = "Hills Science Diet", Description = "Complete and Balanced Dog Food", Price = 19.99m, Quantity = 0 } },
        { 15, new Product { Id = 15, Name = "Purina Dog Chow", Description = "Complete and Balanced Dog Food", Price = 15.99m, Quantity = 456 } }
    };
    }
}
