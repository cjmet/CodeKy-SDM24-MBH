@page "/inventory"
@using SDM24MBH.Data;
@using SDM24MBH.Logic;
@using System.Text.Json;
@using Microsoft.Maui.Storage;
@using System.Diagnostics;

<h3>Inventory (@_products.Count)</h3>


<button @onclick="LoadProducts">Load All Products</button>
<button @onclick="SaveProducts">Update Products</button>
<button @onclick="DeleteProducts">Delete Selected Products</button>
<button @onclick="ClearStorage">Clear ALL Data</button>

<label class="spacer"> &emsp; </label>
<button @onclick="ShowInStock">Show In-Stock</button>
<button @onclick="ShowOutOfStock">Show Out-of-Stock</button>
<button @onclick="InventoryValue">Inventory Value</button>
<br>

@{
    counter = 0;
}
<ul class="list-unstyled">
    @foreach (var product in _products)
    {
        if (++counter > 10)
        {
            @("Too many products to display!")
            break;
        }
        <li>
            <input type="checkbox" @bind="product.Value.isSelected" />
            <label style="width:2em; text-align: right;">@(product.Key != product.Value.Id ? $"KeyError[{product.Key}]" : product.Key)</label>
            <input @bind="product.Value.Brand" />
            <input @bind="product.Value.Name" />
            <input @bind="product.Value.Description" style="width: 30em;" />
            <label> &nbsp Qty:</label><input @bind="product.Value.Quantity" type="number" style="width: 4em; text-align: right;" />
            <label> &nbsp  $</label><input @bind="product.Value.Price" type="number" style="width: 5.25em; text-align: right;" />
        </li>
    }
</ul>

<input placeholder="Brand" @bind="newProduct.Brand" />
<input placeholder="Name" @bind="newProduct.Name" />
<input placeholder="Description" @bind="newProduct.Description" />
<input placeholder="Price" @bind="newProduct.Price" />
<input placeholder="Quantity" @bind="newProduct.Quantity" />

<button @onclick="AddProduct">Add Product</button>



@code {
    // Variables
    private Int32 counter = 0;
    private Dictionary<int, IProduct> _products = new Dictionary<int, IProduct>
       {
        { 1, new Product { Id = 1, Name = "Products should be loading", Description = "from Local Storage?",}
        }
       };
    private IProduct newProduct = new Product();
    private IProductLogic _productLogic = new ProductLogic();


    // Methods


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await LoadProducts();
    }

    // private async void should only be used for event handlers.
    // private async Task should be used for all other methods.
    private async void NIA()
    {
        if (App.Current?.MainPage != null) await App.Current.MainPage.DisplayAlert("NIA", "Not Implemented Yet", "OK");
    }

    private async Task ClearStorage()
    {
        Debug.WriteLine("Attempting to Clear Storage");
        _products.Clear();
        var results = await _productLogic.ClearStorage();
        Debug.WriteLine($"Results: {results}");
    }

    private async Task LoadProducts()
    {
        Debug.WriteLine("Attempting to Load Products");
        _products = await _productLogic.GetAllProducts();
        Debug.WriteLine($"LoadProducts: {_products.Count}");
        if (_products == null || _products.Count <= 0)
        {
            _products = TestIProducts.GetTestProducts();
            Debug.WriteLine($"GetTestProducts: {_products.Count}");
        }
        ClearSelection();
    }

    private async Task AddProduct()
    {        
        Debug.WriteLine("Attempting to Add Product");
        var newId = await _productLogic.AddProduct(newProduct);
        if (newId > 0)
        {
            _products.Add(newId, newProduct);
            newProduct = new Product();
        }
        Debug.WriteLine($"AddProduct: {newId}");
        ClearSelection();
    }

    private async Task SaveProducts()
    {
        Debug.WriteLine("Attempting to Save Products");
        var results = await _productLogic.AddUpdateProducts(_products);
        Debug.WriteLine($"SaveProducts: {results}");
        ClearSelection();
    }

    private async Task DeleteProducts()
    {
        Debug.WriteLine("Attempting to Delete Products");
        var keysToDelete = _products.Where(p => p.Value.isSelected).Select(p => p.Key).ToList();
        keysToDelete.ForEach(key => _products.Remove(key));
        var results = await _productLogic.DeleteProducts(keysToDelete);
        Debug.WriteLine($"DeleteProducts: {results}");
        ClearSelection();
    }

    private async Task ShowInStock()
    {
        Debug.WriteLine("Attempting to Show In-Stock");
        _products = await _productLogic.GetInStockProducts();
        Debug.WriteLine($"ShowInStock: {_products.Count}");
        ClearSelection();
    }

    private async Task ShowOutOfStock()
    {
        Debug.WriteLine("Attempting to Show Out-of-Stock");
        _products = await _productLogic.GetOutOfStockProducts();
        Debug.WriteLine($"ShowOutOfStock: {_products.Count}");
        ClearSelection();
    }

    private async Task InventoryValue()
    {
        Debug.WriteLine("Attempting to Calculate Inventory Value");
        var results = await _productLogic.GetTotalValueOfStock();
        if (App.Current?.MainPage != null ) await App.Current.MainPage.DisplayAlert("Inventory Value", $"Total Value of Stock: {results:C}", "OK");
        Debug.WriteLine($"InventoryValue: {results}");
    }

    private void ClearSelection ()
    {
        _products.Keys.ToList().ForEach(key => _products[key].isSelected = false);
    }

}
